
from random import choice
import telebot

TOKEN = '7270173719:AAGXybibgIJ2O2ZmEMJnuDoNosierURTpIE'
bot = telebot.TeleBot(TOKEN)

users_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = telebot.types.KeyboardButton('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    stop_button = telebot.types.KeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
    keybord.add(start_button, stop_button)
    bot.send_message(message.chat.id,
                     '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
                     reply_markup=keybord)


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
def choose_difficulty(message):
    keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keybord.row('1 - –£–≥–∞–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç –º–∞—Å—Ç–∏')
    keybord.row('2 - –£–≥–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Ü–≤–µ—Ç –º–∞—Å—Ç–∏')
    keybord.row('3 - –£–≥–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –º–∞—Å—Ç—å')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', reply_markup=keybord)
    bot.register_next_step_handler(message, set_difficulty)


@bot.message_handler(func=lambda message: message.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
def stop_game(message):
    if message.chat.id in users_data:
        del users_data[message.chat.id]
    bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.')


def set_difficulty(message):
    difficulty = message.text.split(' ')[0]
    if difficulty in ['1', '2', '3']:
        users_data[message.chat.id] = {'difficulty': difficulty, 'score': 0, 'round': 0}
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ (1-100):')
        bot.register_next_step_handler(message, set_rounds)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        choose_difficulty(message)


def set_rounds(message):
    try:
        num_rounds = int(message.text)
        if 1 <= num_rounds <= 100:
            users_data[message.chat.id]['num_rounds'] = num_rounds
            play_round(message)
        else:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ (1-100):')
        bot.register_next_step_handler(message, set_rounds)


def get_card():
    CARD_NUMBER = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '–≤', '–¥', '–∫', '—Ç']
    CARD_SUIT = ['–±—É–±–Ω—ã', '—á–µ—Ä–≤–∏', '–ø–∏–∫–∏', '—Ç—Ä–µ—Ñ—ã']
    random_card_number = choice(CARD_NUMBER)
    random_card_suit = choice(CARD_SUIT)
    return random_card_number, random_card_suit


def play_round(message):
    user_data = users_data[message.chat.id]
    user_data['round'] += 1
    card_number, card_suit = get_card()
    user_data['current_card'] = (card_number, card_suit)

    if user_data['difficulty'] == '1':
        keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keybord.row('üü• –ö—Ä–∞—Å–Ω—ã–π', '‚¨õ –ß–µ—Ä–Ω—ã–π')
        keybord.row('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã (–ß–µ—Ä–Ω—ã–π –∏–ª–∏ –ö—Ä–∞—Å–Ω—ã–π):', reply_markup=keybord)
        bot.register_next_step_handler(message, compare_answer)
    elif user_data['difficulty'] == '2':
        keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keybord.row('üü• –ö—Ä–∞—Å–Ω—ã–π', '‚¨õ –ß–µ—Ä–Ω—ã–π')
        keybord.row('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã (–ß–µ—Ä–Ω—ã–π –∏–ª–∏ –ö—Ä–∞—Å–Ω—ã–π):', reply_markup=keybord)
        bot.register_next_step_handler(message, compare_color)
    elif user_data['difficulty'] == '3':
        keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for number in ['2', '3', '4', '5', '6', '7', '8', '9', '10', '–≤', '–¥', '–∫', '—Ç']:
            keybord.add(number)
        keybord.row('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:', reply_markup=keybord)
        bot.register_next_step_handler(message, compare_number)


def compare_answer(message):
    user_data = users_data[message.chat.id]
    card_number, card_suit = user_data['current_card']
    if (message.text in ['üü• –ö—Ä–∞—Å–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π'] and card_suit in ['–±—É–±–Ω—ã', '—á–µ—Ä–≤–∏']) or \
            (message.text in ['‚¨õ –ß–µ—Ä–Ω—ã–π', '—á–µ—Ä–Ω—ã–π'] and card_suit in ['–ø–∏–∫–∏', '—Ç—Ä–µ—Ñ—ã']):
        user_data['score'] += 1
        bot.send_message(message.chat.id, f'–í—ã —É–≥–∞–¥–∞–ª–∏! –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
    else:
        bot.send_message(message.chat.id, f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
    next_round(message)


def compare_color(message):
    user_data = users_data[message.chat.id]
    card_number, card_suit = user_data['current_card']
    player_suit_color = message.text.strip().lower()

    if (player_suit_color in ['üü• –∫—Ä–∞—Å–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π'] and card_suit in ['–±—É–±–Ω—ã', '—á–µ—Ä–≤–∏']) or \
            (player_suit_color in ['‚¨õ —á–µ—Ä–Ω—ã–π', '—á–µ—Ä–Ω—ã–π'] and card_suit in ['–ø–∏–∫–∏', '—Ç—Ä–µ—Ñ—ã']):
        keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for number in ['2', '3', '4', '5', '6', '7', '8', '9', '10', '–≤', '–¥', '–∫', '—Ç']:
            keybord.add(number)
        keybord.row('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:', reply_markup=keybord)
        bot.register_next_step_handler(message, compare_number)
    else:
        bot.send_message(message.chat.id, f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —Ü–≤–µ—Ç –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã. –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
        next_round(message)


def compare_number(message):
    user_data = users_data[message.chat.id]
    card_number, card_suit = user_data['current_card']
    player_number = message.text.strip().lower()

    if user_data['difficulty'] == '2':
        if player_number == card_number:
            user_data['score'] += 2
            bot.send_message(message.chat.id, f'–í—ã —É–≥–∞–¥–∞–ª–∏! –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
        else:
            bot.send_message(message.chat.id, f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
        next_round(message)
    elif user_data['difficulty'] == '3':
        if player_number == card_number:
            keybord = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            keybord.row('–±—É–±–Ω—ã', '—á–µ—Ä–≤–∏', '–ø–∏–∫–∏', '—Ç—Ä–µ—Ñ—ã')
            keybord.row('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç—å –∫–∞—Ä—Ç—ã (–±—É–±–Ω—ã, —á–µ—Ä–≤–∏, –ø–∏–∫–∏, —Ç—Ä–µ—Ñ—ã):', reply_markup=keybord)
            bot.register_next_step_handler(message, compare_suit)
        else:
            bot.send_message(message.chat.id, f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
            next_round(message)


def compare_suit(message):
    user_data = users_data[message.chat.id]
    card_number, card_suit = user_data['current_card']
    player_suit = message.text.strip().lower()

    if player_suit == card_suit:
        user_data['score'] += 3
        bot.send_message(message.chat.id, f'–í—ã —É–≥–∞–¥–∞–ª–∏! –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')
    else:
        bot.send_message(message.chat.id, f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –º–∞—Å—Ç—å –∫–∞—Ä—Ç—ã. –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ - {card_number} {card_suit}')

    next_round(message)


def next_round(message):
    user_data = users_data[message.chat.id]
    if user_data['round'] < user_data['num_rounds']:
        play_round(message)
    else:
        bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à —Å—á—ë—Ç: {user_data["score"]}')
        start(message)


bot.infinity_polling()
